package fer.dipl.mdl

import cbor.Cbor
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.dataformat.cbor.CBORFactory
import kotlinx.serialization.decodeFromByteArray
import kotlinx.serialization.encodeToHexString
import java.io.ByteArrayInputStream
import java.security.cert.CertificateFactory
import java.security.cert.X509Certificate
import java.util.*
import kotlin.collections.HashMap

class ReadingMDL{

}

data class IssuerSigned(
    val nameSpaces: Map<String, Array<ByteArray>>,
    val issuerAuth: List<Any>
){
    // Ensure a primary constructor is available
    constructor() : this(HashMap<String, Array<ByteArray>>(), LinkedList<Any>())

    override fun toString(): String {
        var tmp = "IssuerSigned("
        nameSpaces.forEach { key, value ->
            tmp += key + ": ["
            value.forEach { dataIteam ->
                println(decodeNameSpace(dataIteam))
                tmp += decodeNameSpace(dataIteam)
                tmp += ", "
            }
            tmp += "]"

        }
        tmp += ")"

        return tmp
    }

}

data class MyObject(
    val docType: String,
    val issuerSigned: IssuerSigned
){
    // Ensure a primary constructor is available
    constructor() : this("", IssuerSigned())
}

data class DataElementHrv(
    val digestID: String,
    val random: ByteArray,
    val elementIdentifier: String,
    val elementValue: Any
){
    // Ensure a primary constructor is available
    constructor() : this("", byteArrayOf(), "","")
    //constructor() : this(byteArrayOf())
    override fun toString(): String {
        var tmp = "DataElementHrv("
        tmp += "digestID=" + digestID + ", "
        tmp += "random=h'" + random.joinToString(""){ String.format("%02X", it) } + "', "
        tmp += "elementIdentifier=" + elementIdentifier + ", "
        tmp += "elementValue=" + elementValue
        tmp += ")"

        return tmp
    }
}

data class Random(
    val random: ByteArray
)


suspend fun main(){
    val hex_string = "a267646f6354797065756f72672e69736f2e31383031332e352e312e6d444c6c6973737565725369676e6564a26a6e616d65537061636573a1716f72672e69736f2e31383031332e352e3184d8185852a4686469676573744944006672616e646f6d50381293a9c3e6a8635aa24fdf41e1633171656c656d656e744964656e7469666965726b66616d696c795f6e616d656c656c656d656e7456616c756563446f65d8185852a4686469676573744944016672616e646f6d5095bfac2f448f1131f63acc90a1e7071e71656c656d656e744964656e7469666965726a676976656e5f6e616d656c656c656d656e7456616c7565644a6f686ed818585ba4686469676573744944026672616e646f6d504f650aab7a8e71e4c074adbff89fc6ec71656c656d656e744964656e7469666965726a62697274685f646174656c656c656d656e7456616c7565d903ec6a313939302d30312d3135d818584ea4686469676573744944036672616e646f6d50b46d207a9a77b70d830d0bb374d8825f71656c656d656e744964656e7469666965726667656e6465726c656c656d656e7456616c7565644d616c656a697373756572417574688443a10126a1182159014c308201483081eea003020102020889ef469391873217300a06082a8648ce3d04030230173115301306035504030c0c4d444f4320524f4f54204341301e170d3234303430393230353033345a170d3234303431303230353033345a301b3119301706035504030c104d444f432054657374204973737565723059301306072a8648ce3d020106082a8648ce3d030107034200041528cbd2535776cecafcceb7c9273d6a8965e09bd00e8ff8eb30707b5b8c962e6adf53bb826fb79118d705af8220e6062b4623458dcd2339a681d9e3dd8fb3ffa320301e300c0603551d130101ff04023000300e0603551d0f0101ff040403020780300a06082a8648ce3d0403020349003046022100bcc23bca396c04258cb94245f43e1a9b14e64258bf41cccbf00598196c75397f02210083a4e920d8ca2f1210c5fa00c9a78415ed633023b997523279da16d4d013f2b45901ddd8185901d8a66776657273696f6e63312e306f646967657374416c676f726974686d675348412d3235366c76616c756544696765737473a1716f72672e69736f2e31383031332e352e31a4005820763f411e254061deb9b4c3a06a4782ca73aad7a474ca33c2a508bd5ce4f415800158201b55b4d0c072443a1321bcc0c7baf345d0dd315dccb32a34db10d6c7d5103e190258209d7901d5c3492b36871ea245df9337e20e7bf38936da72e04415b4bc59f4221c035820a998084a1f2735b57306700d7898c4281e4e6aca08e5122fb3f068dbdc2227296d6465766963654b6579496e666fa1696465766963654b6579a401022001215820ba6c653428a784b79ef7a542fc27b3fc27d991d30e34c565b0f2ae2a00a70cab225820e21461f783c06f83eee6f09d9e8b034945be6cc42967035a3e3aadd78ec3959867646f6354797065756f72672e69736f2e31383031332e352e312e6d444c6c76616c6964697479496e666fa3667369676e6564c0781b323032342d30342d30395432303a35303a33342e3739363436365a6976616c696446726f6dc0781b323032342d30342d30395432303a35303a33342e3739363436395a6a76616c6964556e74696cc0781b323032352d30342d30395432303a35303a33342e3739363436395a5840ea661b85e05b6898a6bdbcf97119b9218f54f0f2fa98bf0692f165965c1a35287efcb29145f28fb30575e2d460b8055205af7c6636b07b689aa17ed48d85fb30"
    // Example CBOR hex string
    val cborHexString = "a267646f6354797065756f72672e69736f2e31383031332e352e312e6d444c6c6973737565725369676e6564a26a6e616d65537061636573a1716f72672e69736f2e31383031332e352e3184d8185852a4686469676573744944006672616e646f6d50381293a9c3e6a8635aa24fdf41e1633171656c656d656e744964656e7469666965726b66616d696c795f6e616d656c656c656d656e7456616c756563446f65d8185852a4686469676573744944016672616e646f6d5095bfac2f448f1131f63acc90a1e7071e71656c656d656e744964656e7469666965726a676976656e5f6e616d656c656c656d656e7456616c7565644a6f686ed818585ba4686469676573744944026672616e646f6d504f650aab7a8e71e4c074adbff89fc6ec71656c656d656e744964656e7469666965726a62697274685f646174656c656c656d656e7456616c7565d903ec6a313939302d30312d3135d818584ea4686469676573744944036672616e646f6d50b46d207a9a77b70d830d0bb374d8825f71656c656d656e744964656e7469666965726667656e6465726c656c656d656e7456616c7565644d616c656a697373756572417574688443a10126a1182159014c308201483081eea003020102020889ef469391873217300a06082a8648ce3d04030230173115301306035504030c0c4d444f4320524f4f54204341301e170d3234303430393230353033345a170d3234303431303230353033345a301b3119301706035504030c104d444f432054657374204973737565723059301306072a8648ce3d020106082a8648ce3d030107034200041528cbd2535776cecafcceb7c9273d6a8965e09bd00e8ff8eb30707b5b8c962e6adf53bb826fb79118d705af8220e6062b4623458dcd2339a681d9e3dd8fb3ffa320301e300c0603551d130101ff04023000300e0603551d0f0101ff040403020780300a06082a8648ce3d0403020349003046022100bcc23bca396c04258cb94245f43e1a9b14e64258bf41cccbf00598196c75397f02210083a4e920d8ca2f1210c5fa00c9a78415ed633023b997523279da16d4d013f2b45901ddd8185901d8a66776657273696f6e63312e306f646967657374416c676f726974686d675348412d3235366c76616c756544696765737473a1716f72672e69736f2e31383031332e352e31a4005820763f411e254061deb9b4c3a06a4782ca73aad7a474ca33c2a508bd5ce4f415800158201b55b4d0c072443a1321bcc0c7baf345d0dd315dccb32a34db10d6c7d5103e190258209d7901d5c3492b36871ea245df9337e20e7bf38936da72e04415b4bc59f4221c035820a998084a1f2735b57306700d7898c4281e4e6aca08e5122fb3f068dbdc2227296d6465766963654b6579496e666fa1696465766963654b6579a401022001215820ba6c653428a784b79ef7a542fc27b3fc27d991d30e34c565b0f2ae2a00a70cab225820e21461f783c06f83eee6f09d9e8b034945be6cc42967035a3e3aadd78ec3959867646f6354797065756f72672e69736f2e31383031332e352e312e6d444c6c76616c6964697479496e666fa3667369676e6564c0781b323032342d30342d30395432303a35303a33342e3739363436365a6976616c696446726f6dc0781b323032342d30342d30395432303a35303a33342e3739363436395a6a76616c6964556e74696cc0781b323032352d30342d30395432303a35303a33342e3739363436395a5840ea661b85e05b6898a6bdbcf97119b9218f54f0f2fa98bf0692f165965c1a35287efcb29145f28fb30575e2d460b8055205af7c6636b07b689aa17ed48d85fb30" // Replace with your CBOR hex string

    // Decode CBOR hex string
    val decodedBytes = hexStringToByteArray(cborHexString)
    val decodedCbor: MyObject =  decodeCbor(decodedBytes)

    val mapper = ObjectMapper(CBORFactory())
    val test = mapper.readValue(decodedBytes, MyObject::class.java)

    if (decodedCbor != null) {
        println(decodedCbor.issuerSigned.nameSpaces.values)
    }
    decodedCbor.issuerSigned.nameSpaces.values.forEach { it ->
        println(it)
        it.forEach { itit ->
            println(itit)
            val temp_hrv = decodeNameSpace(itit)
            println("TEMP : " + temp_hrv)
            println("TEMP : " + temp_hrv.random.joinToString(""){ String.format("%02X", it) })

            println("TEMP : " + temp_hrv.digestID)
            println("TEMP : " + temp_hrv.elementIdentifier)
            println("TEMP : " + temp_hrv.elementValue)
        }
    }




    // Print decoded CBOR
    println(decodedCbor)

    val x5chain
    val bytes = x5chain.chunked(2).map { it.toInt(16).toByte() }.toByteArray()
    println(bytes.toUByteArray())

    val certificateFactory = CertificateFactory.getInstance("X.509")
    val inputStream = ByteArrayInputStream(bytes)

    val certificates = mutableListOf<X509Certificate>()
    try {
        val certificate = certificateFactory.generateCertificate(inputStream) as X509Certificate
        certificates.add(certificate)
    } catch (e: Exception) {
        // Handle certificate parsing errors
        e.printStackTrace()
    } finally {
        inputStream.close()
    }
    certificates.forEachIndexed { index, certificate ->
        println(certificate)
        println("Certificate $index:")
        println(certificate)
        // Print other certificate details if needed
    }

}

fun hexStringToByteArray(hexString: String): ByteArray {
    val len = hexString.length
    val data = ByteArray(len / 2)
    var i = 0
    while (i < len) {
        data[i / 2] = ((Character.digit(hexString[i], 16) shl 4)
                + Character.digit(hexString[i + 1], 16)).toByte()
        i += 2
    }
    return data
}

fun decodeCbor(data: ByteArray): MyObject {
    val mapper = ObjectMapper(CBORFactory())
    return mapper.readValue(data, MyObject::class.java)
}

fun decodeNameSpace(data: ByteArray): DataElementHrv {
    val mapper = ObjectMapper(CBORFactory())
    return mapper.readValue(data, DataElementHrv::class.java)
}

